from Token_type import Token_type
KEY_WORDS = {
    # key words
    'import': Token_type('symbol', r'import'),
    'if': Token_type('symbol', r'if'),
    'else': Token_type('symbol', r'else'),
    'define': Token_type('symbol', r'define'),
    'display': Token_type('symbol', r'display'),
    'case-lambda': Token_type('symbol', r'case-lambda'),
    'lambda': Token_type('symbol', r'lambda'),
    'begin': Token_type('symbol', r'begin'),
    'letrec': Token_type('symbol', r'letrec'),
    'let': Token_type('symbol', r'let'),
    'when': Token_type('symbol', r'when'),
    'unless': Token_type('symbol', r'unless'),
    'cond': Token_type('symbol', r'cond'),
    '#\\newline': Token_type('symbol', r'#\\newline'),  
    '#\\space': Token_type('symbol', r'#\\space'),  
    '#\\tab': Token_type('symbol', r'#\\tab'),  
    'newline': Token_type('symbol', r'newline'),

    'not': Token_type('symbol', r'not'),
    'and': Token_type('symbol', r'and'),
    'or': Token_type('symbol', r'or'),
    
    'quote': Token_type('symbol', r'quote'),
    'quote': Token_type('quote', r"'"),
    
    'list-tail': Token_type('symbol', r'list-tail'),
    'list-ref': Token_type('symbol', r'list-ref'),
    'list?': Token_type('symbol', r'list\?'),
    'list': Token_type('symbol', r'list'),

     #key words functions
    'set-car!': Token_type('symbol', r'set-car!'),
    'set-cdr!': Token_type('symbol', r'set-cdr!'),
    'vector-set!': Token_type('symbol', r'vector-set!'),
    'make-list': Token_type('symbol', r'make-list'),
    'vector-ref': Token_type('symbol', r'vector-ref'),
    
    'car': Token_type('symbol', r'car'),
    'cdr': Token_type('symbol', r'cdr'),
    'reverse': Token_type('symbol', r'reverse'),
    'memq': Token_type('symbol', r'memq'),
    'member': Token_type('symbol', r'member'),
    'memv': Token_type('symbol', r'memv'),

    'remainder': Token_type('symbol', r'remainder'),
    'quotient': Token_type('symbol', r'quotient'),
    'abs': Token_type('symbol', r'abs'),
    'max': Token_type('symbol', r'max'),
    'min': Token_type('symbol', r'min'),
    'round': Token_type('symbol', r'round'),
    'ceiling': Token_type('symbol', r'ceiling'),
    'floor': Token_type('symbol', r'floor'),
    'truncate': Token_type('symbol', r'truncate'),
    'sqrt': Token_type('symbol', r'sqrt'),
   
    'zero?': Token_type('symbol', r'zero\?'),
    'positive?': Token_type('symbol', r'positive\?'),
    'negative?': Token_type('symbol', r'negative\?'),
    'odd?': Token_type('symbol', r'odd\?'),
    'even?': Token_type('symbol', r'even\?'),
    'boolean?': Token_type('symbol', r'boolean\?'),
    'infinite?': Token_type('symbol', r'infinite\?'),
    'finite?': Token_type('symbol', r'finite\?'),
    'nan?': Token_type('symbol', r'nan\?'),
    'integer?': Token_type('symbol', r'integer\?'),
    'number?': Token_type('symbol', r'number\?'),
    'null?': Token_type('symbol', r'null\?'),
    'inexact?': Token_type('symbol', r'inexact\?'),
    'exact?': Token_type('symbol', r'exact\?'),
    'real?': Token_type('symbol', r'real\?'),
    'rational?': Token_type('symbol', r'rational\?'),
    'eqv?': Token_type('symbol', r'eqv\?'),
    
    'char?': Token_type('symbol', r'char\?'),
    'char=?': Token_type('symbol', r'char\=\?'),
    'char<?': Token_type('symbol', r'char\<\?'),
    'char<=?': Token_type('symbol', r'char\<\=\?'),
    'char>?': Token_type('symbol', r'char\>\?'),
    'char>=?': Token_type('symbol', r'char\>\=\?'),
    'char-ci=?': Token_type('symbol', r'char-ci\=\?'),
    'char-ci<?': Token_type('symbol', r'char-ci\<\?'),
    'char-ci<=?': Token_type('symbol', r'char-ci\<\=\?'),
    'char-ci>?': Token_type('symbol', r'char-ci\>\?'),
    'char-ci>=?': Token_type('symbol', r'char-ci\>\=\?'),
    
    'string?': Token_type('symbol', r'string\?'),
    'string=?': Token_type('symbol', r'string\=\?'),
    'string<?': Token_type('symbol', r'string\<\?'),
    'string<=?': Token_type('symbol', r'string\<\=\?'),
    'string>?': Token_type('symbol', r'string\>\?'),
    'string>=?': Token_type('symbol', r'string\>\=\?'),
    'string-ci=?': Token_type('symbol', r'string-ci\=\?'),
    'string-ci<?': Token_type('symbol', r'string-ci\<\?'),
    'string-ci<=?': Token_type('symbol', r'string-ci\<\=\?'),
    'string-ci>?': Token_type('symbol', r'string-ci\>\?'),
    'string-ci>=?': Token_type('symbol', r'string-ci\>\=\?'),
    
    'string-length': Token_type('symbol', r'string-length'),
    'string-ref': Token_type('symbol', r'string-ref'),
    'string-append': Token_type('symbol', r'string-append'),
    'substring': Token_type('symbol', r'substring'),
    'string-copy': Token_type('symbol', r'string-copy'),
    'string-upcase': Token_type('symbol', r'string-upcase'),
    'string-downcase': Token_type('symbol', r'string-downcase'),
    'string-titlecase': Token_type('symbol', r'string-titlecase'),
    'format': Token_type('symbol', r'format'),
    'append': Token_type('symbol', r'append'),
    'str': Token_type('symbol', r'str'),

}

TOKEN_TYPES = {
    #constants 
    'constant "string"': Token_type('string', r'".*?"'),  

    '-': Token_type('symbol', r'\-'), 
    'eof': Token_type('eof', r'eof'), 
    'constant "int"': Token_type('number', r'-?[0-9]*'),   
    'constant "complex"': Token_type('number', r'-?\d+(\.\d+)?([eE][-+]?\d+)?[+-]\d+(\.\d+)?[i]'),
    'constant "float"': Token_type('number', r'-?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?'),
    'constant "binary"': Token_type('number', r'#b[01]+'),
    'constant "octal"': Token_type('number', r'#o[0-7]+'),
    'constant "hexadecimal"': Token_type('number', r'#x[0-9A-Fa-f]+'),
    'constant "char"': Token_type('string', r'"[^"]+"'),  
    'constant "quote_tilda"': Token_type('quote constant', r'\`(?:\\.|[^"\\])*'),  
    'quote': Token_type('symbol', r'quote'),
    'quote': Token_type('quote', r"'"),
    'constant "true"': Token_type('boolean', r'#t'),
    'constant "false"': Token_type('boolean', r'#f'),
    'constant symbols': Token_type("symbols constant", r"'\([^)]+\)|'[^ )]+"),
    'set': Token_type("symbol", r'set!'),
    'begin': Token_type("symbol", r'begin'),

    #key words

    
    'import': Token_type('symbol', r'import'),
    'if': Token_type('symbol', r'if'),
    'else': Token_type('symbol', r'else'),
    'define': Token_type('symbol', r'define'),
    'display': Token_type('symbol', r'display'),
    'case-lambda': Token_type('symbol', r'case-lambda'),
    'lambda': Token_type('symbol', r'lambda'),
    'begin': Token_type('symbol', r'begin'),
    'letrec': Token_type('symbol', r'letrec'),
    'let': Token_type('symbol', r'let'),
    'when': Token_type('symbol', r'when'),
    'unless': Token_type('symbol', r'unless'),
    'cond': Token_type('symbol', r'cond'),
    '#\\newline': Token_type('symbol', r'#\\newline'),  
    '#\\space': Token_type('symbol', r'#\\space'),  
    '#\\tab': Token_type('symbol', r'#\\tab'),  
    'newline': Token_type('symbol', r'newline'),

    'not': Token_type('symbol', r'not'),
    'and': Token_type('symbol', r'and'),
    'or': Token_type('symbol', r'or'),
    
    'list-tail': Token_type('symbol', r'list-tail'),
    'list-ref': Token_type('symbol', r'list-ref'),
    'list?': Token_type('symbol', r'list\?'),
    'list': Token_type('symbol', r'list'),
    'null?': Token_type('symbol', r'null\?'),

     #key words functions
    'set-car!': Token_type('symbol', r'set-car!'),
    'set-cdr!': Token_type('symbol', r'set-cdr!'),

    'vector-set!': Token_type('symbol', r'vector-set!'),
    'make-list': Token_type('symbol', r'make-list'),
    'vector-ref': Token_type('symbol', r'vector-ref'),
    
    'car': Token_type('symbol', r'car'),
    'cdr': Token_type('symbol', r'cdr'),
    'reverse': Token_type('symbol', r'reverse'),
    'memq': Token_type('symbol', r'memq'),
    'member': Token_type('symbol', r'member'),
    'memv': Token_type('symbol', r'memv'),

    'remainder': Token_type('symbol', r'remainder'),
    'quotient': Token_type('symbol', r'quotient'),
    'abs': Token_type('symbol', r'abs'),
    'max': Token_type('symbol', r'max'),
    'min': Token_type('symbol', r'min'),
    'round': Token_type('symbol', r'round'),
    'ceiling': Token_type('symbol', r'ceiling'),
    'floor': Token_type('symbol', r'floor'),
    'truncate': Token_type('symbol', r'truncate'),
    'sqrt': Token_type('symbol', r'sqrt'),
   
    'zero?': Token_type('symbol', r'zero\?'),
    'positive?': Token_type('symbol', r'positive\?'),
    'negative?': Token_type('symbol', r'negative\?'),
    'odd?': Token_type('symbol', r'odd\?'),
    'even?': Token_type('symbol', r'even\?'),
    'boolean?': Token_type('symbol', r'boolean\?'),
    'infinite?': Token_type('symbol', r'infinite\?'),
    'finite?': Token_type('symbol', r'finite\?'),
    'nan?': Token_type('symbol', r'nan\?'),
    'integer?': Token_type('symbol', r'integer\?'),
    'number?': Token_type('symbol', r'number\?'),
    'inexact?': Token_type('symbol', r'inexact\?'),
    'exact?': Token_type('symbol', r'exact\?'),
    'real?': Token_type('symbol', r'real\?'),
    'rational?': Token_type('symbol', r'rational\?'),
    'eqv?': Token_type('symbol', r'eqv\?'),
    
    'char?': Token_type('symbol', r'char\?'),
    'char=?': Token_type('symbol', r'char\=\?'),
    'char<?': Token_type('symbol', r'char\<\?'),
    'char<=?': Token_type('symbol', r'char\<\=\?'),
    'char>?': Token_type('symbol', r'char\>\?'),
    'char>=?': Token_type('symbol', r'char\>\=\?'),
    'char-ci=?': Token_type('symbol', r'char-ci\=\?'),
    'char-ci<?': Token_type('symbol', r'char-ci\<\?'),
    'char-ci<=?': Token_type('symbol', r'char-ci\<\=\?'),
    'char-ci>?': Token_type('symbol', r'char-ci\>\?'),
    'char-ci>=?': Token_type('symbol', r'char-ci\>\=\?'),
    
    'string?': Token_type('symbol', r'string\?'),
    'string=?': Token_type('symbol', r'string\=\?'),
    'string<?': Token_type('symbol', r'string\<\?'),
    'string<=?': Token_type('symbol', r'string\<\=\?'),
    'string>?': Token_type('symbol', r'string\>\?'),
    'string>=?': Token_type('symbol', r'string\>\=\?'),
    'string-ci=?': Token_type('symbol', r'string-ci\=\?'),
    'string-ci<?': Token_type('symbol', r'string-ci\<\?'),
    'string-ci<=?': Token_type('symbol', r'string-ci\<\=\?'),
    'string-ci>?': Token_type('symbol', r'string-ci\>\?'),
    'string-ci>=?': Token_type('symbol', r'string-ci\>\=\?'),
    
    'string-length': Token_type('symbol', r'string-length'),
    'string-ref': Token_type('symbol', r'string-ref'),
    'string-append': Token_type('symbol', r'string-append'),
    'substring': Token_type('symbol', r'substring'),
    'string-copy': Token_type('symbol', r'string-copy'),
    'string-upcase': Token_type('symbol', r'string-upcase'),
    'string-downcase': Token_type('symbol', r'string-downcase'),
    'string-titlecase': Token_type('symbol', r'string-titlecase'),
    'format': Token_type('symbol', r'format'),
    'append': Token_type('symbol', r'append'),
    'str': Token_type('symbol', r'str'),

    #operations
    '(': Token_type('openedBracket', r'\('),
    ')': Token_type('closedBracket', r'\)'),
    '+': Token_type('symbol', r'\+'),
    '*': Token_type('symbol', r'\*'),
    '/': Token_type('symbol', r'\/'),
    '=': Token_type('symbol', r'\='),
    '<': Token_type('symbol', r'\<'),
    '>': Token_type('symbol', r'\>'),
    '<=': Token_type('symbol', r'\<\='),
    '>=': Token_type('symbol', r'\>\='),

    #special symbols
    '#': Token_type('special symbol', r'#'),
    ',': Token_type('special symbol', r','),
   # "'": Token_type('special symbol', r"'"),
   # "`": Token_type('special symbol', r"`"),

    'identifier': Token_type('symbol', r'[A-Za-z][A-Za-z0-9_-]*')

}